name: Update MAINTAINERS.yaml

on:
  pull_request:
    types: [synchronize, opened]
    paths:
      - 'CODEOWNERS'

jobs:
  update_maintainers:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch branches
        run: git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*
        
      - name: Check for new maintainers
        id: check-maintainers
        run: |
          NEW_MAINTAINER=$(git diff origin/${{ github.base_ref }} -- CODEOWNERS | grep '^+' | grep -v '^\+\+ ' | awk '{print $NF}' | tr -d '@')
          echo "NEW_MAINTAINER=$NEW_MAINTAINER" >> $GITHUB_ENV
          if [ -n "$NEW_MAINTAINER" ]; then
            echo "::set-output name=new-maintainer::true"
          fi
          
      - name: Update MAINTAINERS.yaml
        if: steps.check-maintainers.outputs.new-maintainer == 'true'
        run: |
          USERNAME=$NEW_MAINTAINER
          echo "Username: $USERNAME"   # Print the username
          
          USER_DATA=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" "https://api.github.com/users/$USERNAME")
          echo "User data: $USER_DATA"   # Print the user data
          
          REPO_NAME=$(git config --get remote.origin.url | rev | cut -d'/' -f1 | rev | cut -d'.' -f1)
          echo "Repository name: $REPO_NAME"   # Print the repository name
          
          # Update MAINTAINERS.yaml
          echo "$USERNAME:" >> MAINTAINERS.yaml
          echo "  name: $(echo $USER_DATA | jq -r '.name')" >> MAINTAINERS.yaml
          echo "  github: $USERNAME" >> MAINTAINERS.yaml
          echo "  repository: $REPO_NAME" >> MAINTAINERS.yaml
          
          # Commit changes
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add MAINTAINERS.yaml
          git commit -m "Update MAINTAINERS.yaml"
          git push origin HEAD:${{ github.head_ref }}
        env:
          PAT: ${{ secrets.PAT }}


