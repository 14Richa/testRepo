# name: Verify Maintainers Changes

#        on:
#   pull_request:
#     types: [synchronize, opened]
#     paths:
#       - "MAINTAINERS.yaml"

# jobs:
#   verify-changes:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout main branch
#         uses: actions/checkout@v3
#         with:
#           ref: main
#           path: main-branch

#       - name: Checkout PR branch
#         uses: actions/checkout@v3
#         with:
#           ref: ${{ github.head_ref }}
#           path: pr-branch

#       - name: Install Dependencies
#         run: npm install yaml

#       - name: Verify changes in MAINTAINERS.yaml
#         id: verify-changes
#         uses: actions/github-script@v5
#         with:
#           github-token: ${{ secrets.BOT_TOKEN }}
#           script: |
#             const yaml = require("yaml");
#             const fs = require("fs");

#             const mainFile = yaml.parse(fs.readFileSync("./main-branch/MAINTAINERS.yaml", "utf8"));
#             const prFile = yaml.parse(fs.readFileSync("./pr-branch/MAINTAINERS.yaml", "utf8"));

#             const beforeMaintainers = new Map(mainFile.map((maintainer) => [maintainer.name, {github: maintainer.github, repos: maintainer.repos || []}]));
#             let errorMessages = [];

#             const owner = "${{ github.repository_owner }}";
#             const repo = "${{ github.event.repository.name }}";
#             const pull_number = "${{ github.event.pull_request.number }}";
#             const author = "${{ github.event.pull_request.user.login }}";

#             // If the PR is made by the bot, don't do anything.
#             if (author === 'async-bot') {
#               console.log('Changes made by async-bot, skipping verification.');
#               return;
#             }

#             function createComment(messages) {
#                 const commentBody = messages.join('\n');
#                 github.rest.issues.createComment({ owner, repo, issue_number: pull_number, body: commentBody });
#             }

#             if (prFile.length < mainFile.length) {
#               errorMessages.push('A maintainer has been removed from Maintainers.yaml. Please review.');
#             }

#             for (const maintainer of prFile) {
#               const previousData = beforeMaintainers.get(maintainer.name);
#               if (!previousData) {
#                 errorMessages.push(`A new maintainer, ${maintainer.name}, has been added to Maintainers.yaml. Please review.`);
#               } else {
#                 const previousGithub = previousData.github;
#                 const previousRepos = previousData.repos;

#                 if (previousGithub !== maintainer.github) {
#                   errorMessages.push(`GitHub key for ${maintainer.name} has been modified in Maintainers.yaml. Please review.`);
#                 }
#                 if (JSON.stringify(previousRepos) !== JSON.stringify(maintainer.repos || [])) {
#                   errorMessages.push(`Repos list for ${maintainer.name} has been modified in Maintainers.yaml. Please review.`);
#                 }
#               }
#             }

#             // If there are any error messages, create a comment on the PR
#             if (errorMessages.length > 0) {
#                 createComment(errorMessages);

#                 // Close the PR
#                 github.rest.pulls.update({
#                     owner,
#                     repo,
#                     pull_number,
#                     state: 'closed'
#                 });
#             }
